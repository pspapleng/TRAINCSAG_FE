{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Layout.svelte",
    "..\\..\\Login.svelte",
    "..\\..\\Posts.svelte",
    "..\\..\\Register.svelte",
    "..\\..\\ReplyListItem.svelte",
    "..\\..\\ReplyList.svelte",
    "..\\..\\PostList.svelte",
    "..\\..\\PostListItem.svelte",
    "..\\..\\PostForm.svelte",
    "..\\..\\ReplyForm.svelte"
  ],
  "sourcesContent": [
    "<main>\r\n    <slot></slot>\r\n</main>\r\n<style>\r\n    main{\r\n        height: 100vh;\r\n    }\r\n</style>",
    "<script>\r\n  let username = \"\";\r\n  let password = \"\";\r\n  let error = \"\";\r\n  import { user, pages } from \"../store.js\";\r\n  const onLogin = async () => {\r\n    error = \"\";\r\n    if (!(username && password)) {\r\n      error = \"plz check username and password\";\r\n      return\r\n    }\r\n    let res = await fetch(\"http://applemalakor.herokuapp.com/api/user/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ username, password }),\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    });\r\n    let text = await res.text();\r\n    if (res.ok) {\r\n      $user.username = username;\r\n      $pages = \"Posts\";\r\n    } else {\r\n      error = text;\r\n    }\r\n  };\r\n  const gotoReg = () => {\r\n    $pages = \"Reg\";\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    position: relative;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    text-align: center;\r\n    display: block;\r\n  }\r\n  .container input {\r\n    width: 500px;\r\n  }\r\n  .reg {\r\n    color: purple;\r\n  }\r\n  .reg:hover {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  <title>Login to forum</title>\r\n</svelte:head>\r\n<section class=\"container\">\r\n  <div>\r\n    <input bind:value={username} type=\"text\" placeholder=\"username\" />\r\n  </div>\r\n  <div>\r\n    <input bind:value={password} type=\"password\" placeholder=\"password\" />\r\n  </div>\r\n  <p>\r\n    Don't have account ?\r\n    <span class=\"reg\" on:click={gotoReg}> <!--อยากให้กดได้อ่า-->\r\n      <strong>Regeister</strong>\r\n    </span>\r\n  </p>\r\n  {#if error}\r\n    <p style=\"color:red\">{error}</p>\r\n  {/if}\r\n  <button class=\"button button-outline\" on:click={onLogin}>Login</button>\r\n</section>\r\n",
    "<script>\r\n  //   import { onMount } from \"svelte\";\r\n  import { user, pages } from \"../store.js\";\r\n  import { fade } from \"svelte/transition\";\r\n  import PostList from \"../components/PostList.svelte\";\r\n  import PostListItem from \"../components/PostListItem.svelte\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n  const onNavigate = ({detail:dir}) => {\r\n    dispatch(\"navigate\", dir);\r\n  };\r\n  let fetchdata = async () => {\r\n    if ($user) {\r\n      let res = await fetch(\"http://applemalakor.herokuapp.com/api/posts\");\r\n      let data = await res.json();\r\n      if (res.ok) {\r\n        return data;\r\n      } else {\r\n        let err = await res.text();\r\n        throw new Error(err);\r\n      }\r\n    }\r\n  };\r\n  let promise = fetchdata();\r\n  const gotoPost = ({ detail: id }) => {\r\n    $pages = `PostID?id=${id}`;\r\n    console.log(id, $pages);\r\n    dispatch(\"navigate\", \"left\");\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .error {\r\n    color: red;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  <title>Posts</title>\r\n</svelte:head>\r\n\r\n<section>\r\n  {#await promise}\r\n  <h1>รอนานๆก็อาจจะบั่นทอนหัวใจ</h1>\r\n    <!-- ระหว่างรอให้โชว์อะไรสักอย่าง -->\r\n  {:then posts}\r\n    <PostList on:navigate={onNavigate}>\r\n      {#each posts as post}\r\n        <PostListItem\r\n          id={post.id}\r\n          name={post.name}\r\n          topic={post.topic}\r\n          on:gotoPost={gotoPost} />\r\n      {/each}\r\n    </PostList>\r\n  {:catch err}\r\n    <p class=\"error\">Error when fetch posts.{err}</p>\r\n  {/await}\r\n</section>\r\n",
    "<script>\r\n  let username = \"\";\r\n  let password = \"\";\r\n  let err = \"\";\r\n  import { pages } from \"../store.js\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n  const onLogin = async () => {\r\n    if (!(username && password)) {\r\n      err = \"plz check username and password\";\r\n      return;\r\n    }\r\n    let res = await fetch(\"http://applemalakor.herokuapp.com/api/user\", {\r\n      method: \"post\",\r\n      body: JSON.stringify({ username, password }),\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      }\r\n    });\r\n    let text = await res.text();\r\n    if (res.ok) {\r\n      $pages = \"Login\";\r\n    } else {\r\n      err = text;\r\n    }\r\n  };\r\n  const onCancle = () => {\r\n    $pages = \"Login\";\r\n    dispatch(\"navigate\", \"right\");\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    position: relative;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    text-align: center;\r\n    display: block;\r\n  }\r\n  .container input {\r\n    width: 500px;\r\n  }\r\n</style>\r\n\r\n<svelte:head>\r\n  <title>Login to forum</title>\r\n</svelte:head>\r\n<section class=\"container\">\r\n  <div>\r\n    <!-- ทำไมค่าไม่เปลี่ยนฟระ : กูจะไปรู้ม้ายยยยยยยย-->\r\n    <input bind:value={username} type=\"text\" placeholder=\"username\" />\r\n  </div>\r\n  <div>\r\n    <!-- นี่ด้วย : เออดิ -->\r\n    <input bind:value={password} type=\"password\" placeholder=\"password\" />\r\n  </div>\r\n  <p style=\"color:red\">{err}</p>\r\n  <button class=\"button button-outline\" on:click={onLogin}>Registor</button>\r\n  <button class=\"button button-clear\" on:click={onCancle}>Back</button>\r\n</section>\r\n",
    "<script>\r\n  export let name, reply;\r\n</script>\r\n\r\n<style>\r\n  .card {\r\n    border-radius: 5px;\r\n    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\r\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\r\n    margin-bottom: 2rem;\r\n    padding: 10px 10px;\r\n  }\r\n  .card:first{\r\n    margin-top: 10px;\r\n  }\r\n  p{\r\n    margin-bottom: 1rem;\r\n  }\r\n</style>\r\n\r\n<div class=\"card\">\r\n  <p>{reply}</p>\r\n  <p>\r\n    From:\r\n    <strong>{name}</strong>\r\n  </p>\r\n</div>\r\n",
    "<script>\r\n  export let topic, name, content;\r\n  import { createEventDispatcher } from 'svelte'\r\n  import { pages } from \"../store.js\";\r\n  import ReplyForm from './ReplyForm.svelte'\r\n  const backToPage = () => {\r\n    $pages = \"Posts\";\r\n  };\r\n  const dispatch = createEventDispatcher()\r\n  const onReplySuccess = () =>{\r\n    dispatch('ReplySuccess')\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    margin-top: 10rem;\r\n    padding: 0 10rem;\r\n  }\r\n  hr {\r\n    border-top: 0.1rem solid #a2a2a2;\r\n  }\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <h1>\r\n    {topic}\r\n    <span style=\"float:right;\">\r\n      <button class=\"button button-outline\" on:click={backToPage}>back</button>\r\n    </span>\r\n  </h1>\r\n  <hr />\r\n  <p>{content}</p>\r\n  <p>Posted by <strong>{name}</strong></p>\r\n  <ReplyForm on:ReplySuccess={onReplySuccess}/>\r\n  <h5><strong>Comment :</strong></h5>\r\n  <slot />\r\n</div>\r\n",
    "<script>\r\n  import PostForm from \"./PostForm.svelte\";\r\n  import { user, pages } from \"../store.js\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n  const onLogout = () => {\r\n    $user = { username: \"\" };\r\n    $pages = \"Login\";\r\n    dispatch(\"navigate\", \"right\");\r\n  };\r\n</script>\r\n\r\n<style>\r\n  .container {\r\n    padding: 0 10rem;\r\n    padding-top: 10rem;\r\n  }\r\n</style>\r\n\r\n<div class=\"container\">\r\n  <h1>\r\n    Posts List\r\n    <span>\r\n      <button style=\"float:right\" class=\"button-outline\" on:click{onLogout}>\r\n        <!-- เมื่อ click ให้เรียก function logout -->\r\n        Logout\r\n      </button>\r\n    </span>\r\n  </h1>\r\n  <hr />\r\n  <PostForm />\r\n  <slot />\r\n</div>\r\n",
    "<script>\r\n  export let id, name, topic; // จะรับค่า props ต้องใส่อะไรหนิ\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n  const gotoPost = () => {\r\n    // component ด้านบน on:gotoPost ได้\r\n    dispatch(\"gotoPost\", id);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  h4:hover {\r\n    cursor: pointer;\r\n  }\r\n  .card {\r\n    border-radius: 5px;\r\n    box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),\r\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 1px 3px 0px rgba(0, 0, 0, 0.12);\r\n    margin-bottom: 5rem;\r\n    padding: 10px 10px;\r\n  }\r\n  .row {\r\n    margin: 0;\r\n  }\r\n</style>\r\n\r\n<div class=\"container card\">\r\n  <div class=\"row\">\r\n    <h4 on:click={gotoPost}>{topic}</h4>\r\n  </div>\r\n  <div class=\"row\">\r\n    <p>{name}</p>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n  let active = false;\r\n  let topic = \"\";\r\n  let content = \"\";\r\n  import { user, pages } from \"../store.js\";\r\n  const handlePostClick = () => {\r\n    if (active && topic && content) {\r\n      fetch(\"http://applemalakor.herokuapp.com/api/posts/\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          name: $user.username,\r\n          topic,\r\n          content\r\n        }),\r\n        headers: {\r\n          \"content-type\": \"application/json\"\r\n        }\r\n      })\r\n        .then(res => res.text())\r\n        .then(id => {\r\n          $pages = `PostID?id=${id}`;\r\n        });\r\n    } else {\r\n      active = true;\r\n    }\r\n  };\r\n  const handleCancleClick = () => {\r\n    active = false;\r\n    topic = \"\";\r\n    content = \"\";\r\n  };\r\n</script>\r\n\r\n<style>\r\n  textarea {\r\n    resize: none;\r\n  }\r\n</style>\r\n\r\n<button class=\"button\" class:button-clear={!active} on:click={handlePostClick}>\r\n  <!-- อยากให้ button-clear ใช้ตอนไม่ active -->\r\n  Post !\r\n</button>\r\n{#if active}\r\n  <button\r\n    style=\"float:right\"\r\n    class=\"button-outline\"\r\n    on:click={handleCancleClick}>\r\n    cancle\r\n  </button>\r\n  <input type=\"text\" name=\"Topic\" placeholder=\"Topic\" bind:value={topic} />\r\n  <textarea bind:value={content} placeholder=\"Content\" />\r\n{/if}\r\n",
    "<script>\r\n  let active = false;\r\n  let reply = \"\";\r\n  import { user, pages } from \"../store.js\";\r\n  import { createEventDispatcher } from \"svelte\";\r\n  const dispatch = createEventDispatcher();\r\n  const handleReplyClick = async () => {\r\n    if (active &&  reply) { //อยากให้ active เป็น true และ reply ไม่ว่าง ถ้าว่างจะส่งทำไม 5555\r\n      let res = await fetch(\r\n        `http://applemalakor.herokuapp.com/api/posts/${$pages.replace(\"PostID?id=\",\"\")}/reply`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            name: $user.username,\r\n            reply\r\n          }),\r\n          headers: {\r\n            \"content-type\": \"application/json\"\r\n          }\r\n        }\r\n      );\r\n      if (res.ok) {\r\n        dispatch(\"ReplySuccess\");\r\n      }\r\n    } else {\r\n      active = true;\r\n    }\r\n  };\r\n  const handleCancleClick = () => {\r\n    active = false;\r\n    reply = \"\";\r\n  };\r\n</script>\r\n\r\n<style>\r\n  textarea {\r\n    resize: none;\r\n  }\r\n</style>\r\n\r\n<button class=\"button\" class:button-clear={!active} on:click={handleReplyClick}>\r\n  Reply !\r\n</button>\r\n{#if active}\r\n  <button\r\n    style=\"float:right\"\r\n    class=\"button-outline\"\r\n    on:click={handleCancleClick}>\r\n    cancle\r\n  </button>\r\n  <textarea bind:value={reply} placeholder=\"Content\" />\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "AAII,mBAAI,CAAC,AACD,MAAM,CAAE,KAAK,AACjB,CAAC;AC0BH,UAAU,4BAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,wBAAU,CAAC,KAAK,cAAC,CAAC,AAChB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,IAAI,4BAAC,CAAC,AACJ,KAAK,CAAE,MAAM,AACf,CAAC,AACD,gCAAI,MAAM,AAAC,CAAC,AACV,MAAM,CAAE,OAAO,AACjB,CAAC;ACfD,MAAM,cAAC,CAAC,AACN,KAAK,CAAE,GAAG,AACZ,CAAC;ACDD,UAAU,8BAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,WAAW,IAAI,CAAC,CAC3B,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,KAAK,AAChB,CAAC,AACD,yBAAU,CAAC,KAAK,eAAC,CAAC,AAChB,KAAK,CAAE,KAAK,AACd,CAAC;ACrCD,KAAK,eAAC,CAAC,AACL,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAC1E,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AACD,oBAAK,MAAM,CAAC,AACV,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,gBAAC,CAAC,AACA,aAAa,CAAE,IAAI,AACrB,CAAC;ACFD,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,CAAC,CAAC,KAAK,AAClB,CAAC,AACD,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,MAAM,CAAC,KAAK,CAAC,OAAO,AAClC,CAAC;ACRD,UAAU,cAAC,CAAC,AACV,OAAO,CAAE,CAAC,CAAC,KAAK,CAChB,WAAW,CAAE,KAAK,AACpB,CAAC;ACLD,iBAAE,MAAM,AAAC,CAAC,AACR,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC9C,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAC1E,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AACD,IAAI,eAAC,CAAC,AACJ,MAAM,CAAE,CAAC,AACX,CAAC;ACWD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,AACd,CAAC;ACDD,QAAQ,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,AACd,CAAC"
}